plugins { id 'org.beryx.runtime' version '1.12.7' }
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets.main.java.srcDirs = ["java/"]
sourceSets.main.resources.srcDirs = ["resources/"]

eclipse.project.name = appName + "-example"

sourceCompatibility = 17
mainClassName = "git.crystal.example.Example"

def osName = System.getProperty('os.name').toLowerCase(Locale.ROOT);
project.ext.assetsDir = new File("resources/")

task runGame(dependsOn: classes, type: JavaExec) {
    mainClass = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task debug(dependsOn: classes, type: JavaExec) {
    mainClass = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

task dist(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Main-Class': project.mainClassName
    }

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
    destinationDirectory = file("$buildDir/lib")
}
jpackageImage.dependsOn dist

dist.dependsOn classes

runtime {
    options = ['--strip-debug',
               '--compress', '2',
               '--no-header-files',
               '--no-man-pages',
               '--strip-native-commands',
               '--vm', 'server']
    modules = ['java.base' ,
               'java.desktop',
               'jdk.unsupported']
    distDir = file(buildDir)

    jpackage {
        jpackageHome = 'C:/Program Files/Eclipse Adoptium/jdk-17.0.2.8-hotspot'
        mainJar = dist.archiveFileName.get()
        mainClass = project.mainClassName
        if (osName.contains('windows')) {
            imageOptions = ["--icon", file("../icons/icon.ico")] as List<String>
        } else if (osName.contains('linux')) {
            imageOptions = ["--icon", file("../icons/icon.png")] as List<String>
        } else if (osName.contains('mac')) {
            imageOptions = ["--icon", file("../icons/icon.icns")] as List<String>
        }
    }
}